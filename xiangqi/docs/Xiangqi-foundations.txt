Xiangqi programmed in Red documentation.
========================================

==================================================================
This document explains the choices made and background information 
for the internal working of the program.

The main purpose of this exercise is to create a program that 
people can read and understand and improve if they want, giving 
ideas and handles to lift computer play of chess up to higher 
levels.

A lot of information about Xiangqi can be found on the internet. 
One very helpful document is the ELP document
	http://www.csie.ndhu.edu.tw/~sjyen/Papers/2004CCC.pdf
==================================================================

Board
=====
As always it is best to start at the beginning, the board.
The mental picture we use is the Xiangqi-board from the white/red 
player perspective and choose a numbering for the fields:
   10 20 30 40 50 60 70 80 90
    9 19 29 39 49 59 69 79 89
    8 18 28 38 48 58 68 78 88
    7 17 27 37 47 57 67 77 87
    6 16 26 36 46 56 66 76 86
    5 15 25 35 45 55 65 75 85
    4 14 24 34 44 54 64 74 84
    3 13 23 33 43 53 63 73 83
    2 12 22 32 42 52 62 72 82
    1 11 21 31 41 51 61 71 81
in practice we can just use a block with 90 fields to represent a board.

Perhaps it would have been easier to have numbered the fields a little different like
   19 29 39 49 59 69 79 89 99
   18 28 38 48 58 68 78 88 98
   17 27 37 47 57 67 77 87 97
   16 26 36 46 56 66 76 86 96
   15 25 35 45 55 65 75 85 95
   14 24 34 44 54 64 74 84 94
   13 23 33 43 53 63 73 83 93
   12 22 32 42 52 62 72 82 92
   11 21 31 41 51 61 71 81 91
   10 20 30 40 50 60 70 80 90
with this numbering helping in quickly seeing if pieces are on the same line or same row.
(We can use +9 and then compute the multiples of 10 for line and the units for the rows)

In binary this could translate to a similar numbering
   19 0001 1001  29 0010 1001  ...  99 1001 1001
   18 0001 1000  ...
   17 0001 0111  ...
   16 0001 0110  ...
   15 0001 0101  ...
   14 0001 0100  ...
   13 0001 0011  ...
   12 0001 0010  ...
   11 0001 0001  ...
   10 0001 0000  20 0010 0000  ...  90 1001 0000
Well maybe the program could be rewritten for that, but as the main purpose of this 
exercise is to create a program people can understand and read, let's stay on course 
for now.

Pieces
======
The players have differently colored pieces. 
The color representing red/white is 0 black/blue is 1

The pieces:
 1 general/king		red: swei or shuai black: jiang or tjiang
 2 advisors/guard	shi	or hse
 2 elephants		xiang or hsiang
 2 horses/knights	ma
 2 chariots			ju or gue
 2 canons			pao or pau (red: canon black: catapult)
 5 pawns			red: bing black: zu or tsoe
 	in English notation sometimes S for Soldier is used for a Pawn.

Representation of the pieces on the board
 value          name            as binary
   2   3	P/S	pawn 			00000010 00000011
   4   5	C	canon			00000100 00000101
   8   9	R	chariot/rook	00001000 00001001
  16  17	N/H	horse/knight	00010000 00010001
  32  33	E	elephant		00100000 00100001
  64  65	G/A advisor			01000000 01000001
 128 129	K	king			10000000 10000001
 
 An empty board is represented by a block of 90 times a 0.
 And we now have that the starting position of the game is represented  by
 
start-board: [
  8   0   0   2   0   0   3   0   0   9
 16   0   4   0   0   0   0   5   0  17
 32   0   0   2   0   0   3   0   0  33
 64   0   0   0   0   0   0   0   0  65
128   0   0   2   0   0   3   0   0 129
 64   0   0   0   0   0   0   0   0  65
 32   0   0   2   0   0   3   0   0  33
 16   0   4   0   0   0   0   5   0  17
  8   0   0   2   0   0   3   0   0   9
]

Determining the best move
=========================
The routine to determine the best move will be built after the Negascout algorithm.
Negascout is also termed Principal Variation Search (PVS)
(Also look up the documents for theory about this subject)
 
PVS always returns 1 move, even though more moves could have the same calculated value.
Perhaps in Red it is possible or easy to list all of these moves and then we could
select a move randomly from this list of best scoring moves.

To seed random in Red we need
	random/seed now/precise
	
iterative-deepening-search searches one ply deeper each time until:
	-	depth is reached or
	-	winning moves are found or
	-	all moves lose
	-	only one (1) playable move is left
	-	time is up
lookup-opening-book looks up the information in the opening book
quiescence-search searches on after the last move made within the search depth,
	it checks all following capturemoves from both sides to make sure pieces are 
	not captured back on the next move or pieces are not put on squares where they are 
	just given away. So the validation does not count a quick win but forgets 
	the piece is won back. It should be able to handle check moves also. It should not
	be possible to have an endless streak of check and capture moves between red and black.
	One note is that not every capture move itself will be worthwhile. When this search 
	is done like that, the program will be forced to make bad captures and conclude that 
	in the end the total exchange value will be negative. So this will be one improvement for
	the todo list.

More information
================
More documentation will be added later or you will find 
in the documents for the specific modules of the program.

==End==